# This is an excerpt from a private repo, "cyber-ansible".
# This just shows how I'm doing flash-kernel-efi equivalent from ansible instead of a deb.
# The strategy is basically the same, it just lets me do it without setting up access to a PPA for the deb.

- name: Cyber Best Current Practices (BCP)
  hosts: all
  tasks:
  - name: If / is ZFS and /boot is not ZFS, backup /boot into ZFS
    tags: zfs, backup
    when:
      # Workaround https://github.com/ansible/ansible/issues/72658
      # Might be boot=zfs OR root=zfs OR root=zfs=x OR root=ZFS=x.
      # Just look for "zfs" anywhere in /proc/cmdline.
      # Alternative would be to check if "zfs-initramfs" and/or "zfs-dracut" is installed.
      - ('zfs' in ansible_facts.proc_cmdline.values()|join|lower)
      # Evalutes to truthy value if /boot or /boot/efi is a mountpoint.
      # Due to the aforementioned bug, it won't match for ZFS "bpool" mounts.
      - ansible_facts.mounts|selectattr('mount', 'in', ('/boot', '/boot/efi'))|list
    block:
      - package: name=rsync
      - copy:
          dest: /etc/zz-backup-efi-esp
          mode: 0755
          owner: root
          group: root
          content: |
            #!/bin/sh
            rsync -ai --delete /boot/ /var/backups/boot/
            exit
      # SIGH, we need to mkdir the parent directories as a separate explicit step.
      - file: state=directory recurse=yes name={{ item }}
        loop:
          - /etc/initramfs/post-update.d
          - /etc/kernel/postrm.d
          - /etc/kernel/postinst.d
      - file: state=link src=/etc/zz-backup-efi-esp name={{ item }}
        loop:
          # Yes, this IS the right path for initramfs, even though it looks wrong and doesn't exist in advance.
          - /etc/initramfs/post-update.d/zz-backup-efi-esp
          - /etc/kernel/postrm.d/zz-backup-efi-esp
          - /etc/kernel/postinst.d/zz-backup-efi-esp
